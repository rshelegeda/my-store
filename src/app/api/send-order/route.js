import { NextResponse } from 'next/server'

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const CHAT_ID = process.env.TELEGRAM_CHAT_ID
const CHAT_ID_2 = process.env.TELEGRAM_CHAT_ID_2
const CHAT_ID_3 = process.env.TELEGRAM_CHAT_ID_3

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
 * @param {string} text
 */
const escapeMarkdown = (text) => (text || '').replace(/([\_*\[\]()~`>#+\-=|{}.!])/g, '\\$1')

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç MarkdownV2)
 * @param {object} orderData - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function formatOrderMessage(orderData) {
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  let itemsList = ''
  if (orderData.items && orderData.items.length > 0) {
    itemsList = orderData.items
      .map((item) => {
        const title = escapeMarkdown(item.title || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        const quantity = item.quantity || 1
        const price = item.price || 0
        return `‚Äî ${title} \\(${quantity} —à—Ç\\.\\) —Ü—ñ–Ω–∞: ${escapeMarkdown(String(price))} –≥—Ä–Ω`
      })
      .join('\n')
  } else {
    itemsList = escapeMarkdown('–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π')
  }

  // –û–±—â–∞—è —Å—É–º–º–∞
  const totalPrice = orderData.totalPrice ? escapeMarkdown(String(orderData.totalPrice)) : '–ù/–î'

  // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = `
*–ù–û–í–ò–ô –ó–ê–ö–ê–ó –í –ú–ê–ì–ê–ó–ò–ù–Ü\\!* üõí

*–ö–æ–Ω—Ç–∞–∫—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞:*
–Ü–º'—è: ${escapeMarkdown(orderData.name || '–ù/–î')}
–¢–µ–ª–µ—Ñ–æ–Ω: ${escapeMarkdown(orderData.phone || '–ù/–î')}
–ê–¥—Ä–µ—Å–∞, –ù–æ–≤–∞ –ø–æ—à—Ç–∞: ${escapeMarkdown(orderData.address || '–ù/–î')}

*–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*
${itemsList}

*–°–£–ú–ê:* ${totalPrice} –≥—Ä–Ω\\.
*–ö–æ–º–µ–Ω—Ç–∞—Ä: *${escapeMarkdown(orderData.comment || '–í—ñ–¥—Å—É—Ç–Ω—ñ–π')}
  `
  return message
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–¥–∏–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
 * @param {string} chatId - ID —á–∞—Ç–∞ Telegram
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤ MarkdownV2
 * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
async function sendTelegramMessage(chatId, message) {
  if (!chatId) {
    return false
  }

  const telegramApiUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`

  try {
    const response = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'MarkdownV2',
      }),
    })

    const data = await response.json()

    if (!response.ok || !data.ok) {
      console.error(`Telegram API error for chat ${chatId}:`, data)
      return false
    }

    console.log(`Order successfully sent to chat ${chatId}.`)
    return true
  } catch (error) {
    console.error(`Error sending message to chat ${chatId}:`, error)
    return false
  }
}

export async function POST(request) {
  if (!BOT_TOKEN) {
    console.error('Telegram BOT_TOKEN is missing!')
    return NextResponse.json({ message: 'Telegram BOT_TOKEN is missing' }, { status: 500 })
  }

  // 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID —á–∞—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤
  const chatIds = [CHAT_ID, CHAT_ID_2, CHAT_ID_3].filter(Boolean)

  if (chatIds.length === 0) {
    console.error('No Telegram CHAT_IDs are configured!')
    return NextResponse.json({ message: 'No Telegram CHAT_IDs are configured' }, { status: 500 })
  }

  try {
    const orderData = await request.json()

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
    const telegramMessage = formatOrderMessage(orderData)

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤–æ –≤—Å–µ —á–∞—Ç—ã
    const sendPromises = chatIds.map((id) => sendTelegramMessage(id, telegramMessage))
    const results = await Promise.all(sendPromises)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successfulSends = results.filter((r) => r).length
    const failedChats = chatIds.filter((_, index) => !results[index])

    if (successfulSends === 0) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç
      console.error('Failed to send order to ALL configured Telegram chats.')
      return NextResponse.json(
        { message: 'Failed to send to Telegram completely', failedChats: failedChats },
        { status: 500 },
      )
    }

    if (failedChats.length > 0) {
      // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö
      console.warn(
        `Order successfully sent to ${successfulSends} chats, but failed for: ${failedChats.join(', ')}`,
      )
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
      return NextResponse.json({
        message: 'Order sent successfully, but with partial failures',
        failedChats: failedChats,
      })
    }

    // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã
    return NextResponse.json({ message: 'Order sent to all Telegram chats successfully' })
  } catch (error) {
    console.error('Processing order or JSON parsing error:', error)
    return NextResponse.json(
      { message: 'Internal Server Error during processing' },
      { status: 500 },
    )
  }
}
