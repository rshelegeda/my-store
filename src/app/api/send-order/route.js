// src/app/api/send-order/route.js
import { NextResponse } from 'next/server'

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const CHAT_ID = process.env.TELEGRAM_CHAT_ID

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç MarkdownV2)
function formatOrderMessage(orderData) {
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
  const escapeMarkdown = (text) => text.replace(/([\_*\[\]()~`>#+\-=|{}.!])/g, '\\$1')

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  let itemsList = ''
  if (orderData.items && orderData.items.length > 0) {
    itemsList = orderData.items
      .map((item) => {
        const title = escapeMarkdown(item.title || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        const quantity = item.quantity || 1
        const price = item.price || 0
        return `‚Äî ${title} \\(${quantity} —à—Ç\\.\\) @ ${escapeMarkdown(String(price))}`
      })
      .join('\n')
  } else {
    itemsList = '–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π'
  }

  // –û–±—â–∞—è —Å—É–º–º–∞
  const totalPrice = orderData.totalPrice ? escapeMarkdown(String(orderData.totalPrice)) : '–ù/–î'

  // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = `
*–ù–û–í–ò–ô –ó–ê–ö–ê–ó –í –ú–ê–ì–ê–ó–ò–ù–Ü\\!* üõí

*–ö–æ–Ω—Ç–∞–∫—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞:*
–Ü–º'—è: ${escapeMarkdown(orderData.name || '–ù/–î')}
–¢–µ–ª–µ—Ñ–æ–Ω: ${escapeMarkdown(orderData.phone || '–ù/–î')}
–ê–¥—Ä–µ—Å–∞, –ù–æ–≤–∞ –ø–æ—à—Ç–∞: ${escapeMarkdown(orderData.address || '–ù/–î')}

*–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*
${itemsList}

*–°–£–ú–ê:* ${totalPrice} –≥—Ä–Ω\\.
*–ö–æ–º–µ–Ω—Ç–∞—Ä: *${orderData.comment}
  `
  return message
}

export async function POST(request) {
  if (!BOT_TOKEN || !CHAT_ID) {
    console.error('Telegram API keys missing!')
    return NextResponse.json({ message: 'Telegram API keys missing' }, { status: 500 })
  }

  try {
    const orderData = await request.json()

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const telegramMessage = formatOrderMessage(orderData)

    // API-—ç–Ω–¥–ø–æ–∏–Ω—Ç Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const telegramApiUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`

    const response = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: telegramMessage,
        parse_mode: 'MarkdownV2', // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown V2 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      }),
    })

    const data = await response.json()

    if (!response.ok || !data.ok) {
      console.error('Telegram API error:', data)
      return NextResponse.json(
        { message: 'Failed to send to Telegram', details: data },
        { status: 500 },
      )
    }

    return NextResponse.json({ message: 'Order sent to Telegram successfully' })
  } catch (error) {
    console.error('Processing order error:', error)
    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 })
  }
}
